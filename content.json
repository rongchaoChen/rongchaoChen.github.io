[{"title":"webpack4配置vue2.6","date":"2023-03-26T05:11:50.532Z","path":"2023/03/26/webpack4配置vue23/","text":"这样配置的时候适合再学习vu2&#x2F;3 学习切换的时候,到时就不用切换项目,只要每次重新配置一下webpack.config.js 就可以了. vue2配置首先我们创建一个文件. 在根目录下初始化文件 1npm init 创建vue 目录文件夹, src, public.在publuc 目录下创建index.html,引入vue2 cdn 12&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;div id=&#x27;app&#x27;&gt;&lt;/div&gt; 然后我们在 src 目录下创建一个main.js 来作为我们的入口文件 然后开始下载依赖. 1234567webpack@4.44.2webpack-cli@3.3.12webpack-dev-server@3.11.2html-webpack-plugin@4.5vue-template-compiler@2.7.14vue-loader@15.0-15.9 然后我们开始配置webpack.config.js 12345678910111213141516171819202122232425262728293031const &#123; resolve &#125; = require(&#x27;path&#x27;);const htmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);// 注意这里的vue-loader 一定要在16.0版本一下, 不然版本不兼容const VueLoaderPlugin = require(&#x27;vue-loader/lib/plugin&#x27;);module.exports = &#123; mode: &#x27;development&#x27;, entry: &#x27;./src/main.js&#x27;, output:&#123; path: resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;main.js&#x27; &#125;, externals:&#123; &#x27;vue&#x27;: &#x27;Vue&#x27; &#125;, devtool: &#x27;source-map&#x27;, module:&#123; rules:[ &#123; test: /\\.vue$/, loader: &#x27;vue-loader&#x27; &#125; ] &#125;, plugins:[ new VueLoaderPlugin(), new htmlWebpackPlugin( &#123; template:resolve(__dirname,&#x27;public/index.html&#x27;) &#125;), ]&#125; 在main.js 创建Vue的实例挂载 12345import App from &#x27;./App.vue&#x27;new Vue(&#123; render:h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;) 在src 下创建一个App.vue 1234567891011121314&lt;template&gt;&lt;div&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data()&#123; return &#123; title: &quot;hello word vue2&quot; &#125; &#125;&#125;&lt;/script&gt; 修改package.json, 位置启动项webpack-server-cli 123&quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;webpack-dev-server&quot; &#125;, 这时候,如果没有出现插件兼容的问题, 基本就是没问题,可以npm run dev 启动了 vue3 配置在切换vue 的3 我们主要是替换vue-loader 就好了 下载@vue&#x2F;compiler-sfc&#96;是Vue.js 3的一个核心软件包, 而且这时候vue-loader 也要更新16.0 以上的版本最好不要17,不然需要处理兼容性 12vue-loader@next@16.1.1npm i -d @vue/compiler-sfc@3.1.2 下载好插件后, 修改一下webpack.config.js 123const VueLoaderPlugin = require(&#x27;vue-loader/lib/plugin&#x27;);// 这时候需要把之前引用vu2 的loader 修改成const &#123;VueLoaderPlugin&#125; = require(&#x27;vue-loader&#x27;); 然后修改main.js 的vue 挂载方式 1Vue.createApp(App).mount(&#x27;#app&#x27;) 修改index.html 中vue的cdn 引入 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@3.1.2/dist/vue.global.js&quot;&gt;&lt;/script&gt; 然后重新启动npm run dev vue2 和vue3 切换在配置好以后, 以后在这项目中, 每次切换的时候需要 修改index.html 的Vue cdn 引用 1234// vue 2&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js&quot;&gt;&lt;/script&gt;// vue3&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@3.1.2/dist/vue.global.js&quot;&gt;&lt;/script&gt; 修改webcpack.comfig.js 1234// vue2 loader// const VueLoaderPlugin = require(&#x27;vue-loader/lib/plugin&#x27;);// vue3 loaderconst &#123; VueLoaderPlugin &#125; = require(&#x27;vue-loader&#x27;); 注意每次vue 2 切换 3 的时候,vue-loader 都要重新下载依赖 12345678910// vue2 切换3vue-loader@next@16.1.1npm i -d @vue/compiler-sfc@3.1.2vue3 切换vue2 vue-loader@15.0-15.9 总结其实在官网说明现在说明建议使用脚手架来构建了 1npm init vue@latest 而且在vue3 @vue&#x2F;compiler-sfc 核心包,已经停止维护了, 但是这样搭建也可以在学习2&#x2F;3 的时候方便切换,","tags":[{"name":"webpack/vue","slug":"webpack-vue","permalink":"http://example.com/tags/webpack-vue/"}]},{"title":"hello","date":"2023-03-24T19:27:38.057Z","path":"2023/03/25/hello/","text":"这是标题1这是标题2这是标题2这是标题3这是标题3这是标题3这是标题2这是标题3这是标题3这是标题3这是标题2这是标题3这是标题3这是标题3","tags":[]},{"title":"tt","date":"2023-03-24T16:49:56.110Z","path":"2023/03/25/tt/","text":"这是h1 标题 Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt aliquid soluta debitis, autem pariatur aut optio laboriosam nulla eius, nisi quibusdam praesentium dicta laudantium! Assumenda a dolor cum autem porro. 这也是h1 标题 Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt aliquid soluta debitis, autem pariatur aut optio laboriosam nulla eius, nisi quibusdam praesentium dicta laudantium! Assumenda a dolor cum autem porro. 12let n = 1;console.log(n) h2 标题22 h2标题22 h1标题11 h2标题11","tags":[]},{"title":"tt copy","date":"2023-03-24T16:00:00.000Z","path":"2023/03/25/tt copy/","text":"这是h1 标题 Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt aliquid soluta debitis, autem pariatur aut optio laboriosam nulla eius, nisi quibusdam praesentium dicta laudantium! Assumenda a dolor cum autem porro. 这也是h1 标题 Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt aliquid soluta debitis, autem pariatur aut optio laboriosam nulla eius, nisi quibusdam praesentium dicta laudantium! Assumenda a dolor cum autem porro. 12let n = 1;console.log(n)","tags":[]},{"title":"标题","date":"2023-03-24T13:48:27.692Z","path":"2023/03/24/StellarTest/","text":"1在心率管家默默无闻地上线了一年多之后，现在终于打算来好好聊聊关于手机摄像头测量心率的那些事。本文参考了很多前辈的文章，将在文末列出。 #h1","tags":[]},{"title":"test","date":"2022-08-25T14:54:51.000Z","path":"2022/08/25/test/","text":"","tags":[{"name":" test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"hexo网站配置","date":"2022-03-16T08:00:40.510Z","path":"2022/03/16/hexo网站配置/","text":"1:安装gitbash2: 打开gitbash 设置user.name和email&#96;&#96; 12git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot; 3: 生成秘钥和github绑定4:安装node5: 安装hexo&#96;&#96; 1npm install -g hexo-cli 6:然后新建一个新的空文件,进入到新建的空文件初始化&#96;&#96; 1hexo init blog 然后测试 &#96;&#96; 12345hexo new test_my_site // 新建一篇文章hexo g // hexo generate #生成hexo s // 打开本地服务器 如果不出意外 服务器启动成功,显示访问端口: localhost: 4000 主题配置https://github.com/litten/hexo-theme-yilia 根据文档主题待定","tags":[]}]